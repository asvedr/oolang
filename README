Synopsis:
Objective oriented language with module system, closures, GC, try-catch, static typing with hindley-milner, FFI to C.
Compilation to C.

fn arr<A>(a : A) : [A] {
	return []
}

class Point {
	pub x : real;
	pub y : real;
	pub fn add(p : Point) : Point {
		return new Point(self.x + p.x, self.y + p.y);
	};
	pub fn mul(a : real) : Point {
		return new Point(self.x * a, self.y * a);
	};
	pub fn init(x : real, y : real) : () {
		self.x = x;
		self.y = y;
	}
}

class Pass { pub fn init():(){} }

class<A> Node {
	pub next : Node<A>;
	pub val  : A;
	pub fn init(h : A, t : Node<A>) : () {
		self.next = t;
		self.val = h;
	}
}


class<A> Stack {
	priv head : Node<A>;
	priv _len  : int;
	pub fn len() : int {
		return self._len;
	};
	pub fn push(item : A) : () {
		self._len = self._len + 1;
		self.head = new Node<A>(item, self.head);
	};
	pub fn pop() : A {
		if self.head == null {
			throw new Exception("NULL")
		} else {
			self._len = self._len - 1;
			var hd = self.head;
			self.head = hd.next;
			return hd.val;
		}
	}
}
