/*
use Std::Io;
use Std::AllFrom::*;
use Std::Alias as Ali;

extern type POSIX
extern fn c_call : Fn(POSIX, str) : () = "c_call_ex"

class single Main : Std::Object {
	pub a : real;
	pub b : Geometry::Point<int>;
	pub fn curry_add(a : int) : Fn(int):int {
		fn closure(b : /*int*/real) : int {
			return a + b;
		};
		return closure
	};
	priv fn add(p : int) : () {
		self.a = self.a + p;
	}
}

fn apply<A>(a : A, b : A, f : Fn(A,A): A) : A {
	f(a,b)
}


fn main() : () {
	var store = Store() as Parent;
	try {
		store.show_all();
	} catch a : Exception {
		print("int code", a)
	} catch {
		print("catch all")
	}
}

*/

fn use_int(a : int) : str {
	return "1"
}

fn str_to_int(a : str) : int {
	return 1
}

fn main() : () {
	var b = [[],[1],[]];
	var c = { 1 : "_" , 3 : "_" , b[1][0] : "_" };
	var a = use_int(str_to_int(c[1]));
	//print(b.to_string())
}
