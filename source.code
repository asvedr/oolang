/*
use Std::Io;
use Std::AllFrom::*;
use Std::Alias as Ali;

extern type POSIX
extern fn c_call : Fn(POSIX, str) : () = "c_call_ex"

class single Main : Std::Object {
	pub a : real;
	pub b : Geometry::Point<int>;
	pub fn curry_add(a : int) : Fn(int):int {
		fn closure(b : /*int*/real) : int {
			return a + b;
		};
		return closure
	};
	priv fn add(p : int) : () {
		self.a = self.a + p;
	}
}

fn apply<A>(a : A, b : A, f : Fn(A,A): A) : A {
	f(a,b)
}


fn main() : () {
	var store = Store() as Parent;
	try {
		store.show_all();
	} catch a : Exception {
		print("int code", a)
	} catch {
		print("catch all")
	}
}

*/

fn main() : () {
	var a : Asc<str, real> = {"a" : 1.0, "b" : 2f};
	a.get("c");
}
