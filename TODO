возможно что будут borrow ошибки. Тогда нужно погрепать все "match.*borrow()"

+/- source => byte code
- byte code => c

* refact: слишком много unsafe. Сделать safe
* refact: как нибудь разделить на модули checker.rs
* bytecode: обрабатывать %rec вызовы.
	Если функция rec_used, то при вызове ее окружение сразу копируется.
	Одна копия используется самой функцией, другая отдается в рекурсивные вызовы.
* typecheck,bytecode: придумать как определять когда можно, а когда нельзя использовать 'as'
* bytecode: попытаться убрать использование VStack там где можно обойтись Temp
* ruleAttr: обращение к методу или свойству - всегда проверка на NULL объекта и проброс исключения, если NULL
* проверять компиленные функции на предмет, могут ли они пускать исключения
* добавить флаг #noexcept для обычных функций
	если функция помечена так, то
	1) после вызова этой функции нет проверки на предмет проброса исключений
	2) внутри этой функции так же нет ни одной проверки на предмет исключений
	3) внутри этой функции отключается ruleAttr. Проверки должны производится вручную if - ами или не производится вообще
	использование #noexcept может быть неплохой unsafe оптимизацией, но за использованием ее нужно следить программисту


+ lexical
+ synax
+/- type check
+/- std lib
+/- compile to c
+/- GC
- FFI
